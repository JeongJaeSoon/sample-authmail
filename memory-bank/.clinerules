# Cline 프로젝트 규칙: 임시 유저 인증 시스템

## 프로젝트 패턴

### 코드 스타일
- 백엔드(Rails): 2칸 들여쓰기, 스네이크 케이스 변수명
- 프론트엔드(React): 2칸 들여쓰기, 카멜 케이스 변수명, 컴포넌트는 파스칼 케이스

### 파일 구조
- 백엔드: Rails 표준 디렉토리 구조 준수
- 프론트엔드: 기능별 디렉토리 구조 (auth, common, components 등)

### 네이밍 규칙
- 모델: 단수형 명사 (예: TemporaryUser, SessionLog)
- 컨트롤러: 복수형 명사 (예: AuthController, SessionsController)
- 서비스: 기능 설명 + Service (예: TempSessionService)
- 컴포넌트: 기능 설명 + 역할 (예: LoginForm, SessionStatus)

## 개발 워크플로우

### 브랜치 전략
- 기능 개발: feature/기능명
- 버그 수정: fix/버그설명
- 리팩토링: refactor/설명

### 커밋 메시지
- 컨벤션: 타입(스코프): 설명
- 예시:
  - ✨ feat(auth): 임시 비밀번호 생성 기능 구현
  - 🐛 fix(session): 세션 만료 처리 오류 수정
  - ♻️ refactor(api): 인증 컨트롤러 리팩토링

## 기술적 결정사항

### 백엔드 패턴
- 서비스 객체 패턴: 비즈니스 로직은 서비스 클래스로 분리
- 얇은 컨트롤러: 컨트롤러는 요청 처리와 응답 반환에 집중
- 모델 검증: 모델 레벨에서 데이터 유효성 검증

### 프론트엔드 패턴
- 컨텍스트 기반 상태 관리: React Context API 활용
- 컴포넌트 분리: 프레젠테이션 컴포넌트와 컨테이너 컴포넌트 분리
- 훅 기반 로직: 재사용 가능한 로직은 커스텀 훅으로 분리

## 테스트 규칙

### 백엔드 테스트
- 모델 테스트: 유효성 검증, 관계, 메서드 테스트
- 컨트롤러 테스트: 요청 처리, 응답 형식, 상태 코드 테스트
- 서비스 테스트: 비즈니스 로직 단위 테스트

### 프론트엔드 테스트
- 컴포넌트 테스트: 렌더링, 이벤트 핸들링 테스트
- 훅 테스트: 커스텀 훅 동작 테스트
- 통합 테스트: 주요 사용자 흐름 테스트

## 사용자 경험 원칙

### 오류 처리
- 명확한 오류 메시지 제공
- 사용자 친화적인 오류 표시
- 오류 발생 시 복구 방법 안내

### 로딩 상태
- 모든 비동기 작업에 로딩 상태 표시
- 스켈레톤 UI 또는 로딩 인디케이터 사용
- 장시간 작업 시 진행 상황 표시

### 접근성
- 키보드 네비게이션 지원
- 스크린 리더 호환성 고려
- 충분한 색상 대비 유지

## 보안 원칙

### 인증 관련
- 비밀번호는 항상 해시화하여 저장
- 세션 ID는 충분한 엔트로피 보장
- 모든 인증 실패는 로깅

### API 보안
- 모든 API 엔드포인트는 인증 검증
- 적절한 CORS 설정 유지
- 입력 데이터 검증 철저히 수행

### 세션 보안
- 쿠키 보안 속성 적용 (HTTPOnly, Secure, SameSite)
- 적절한 세션 타임아웃 설정
- 세션 하이재킹 방지 메커니즘 적용
